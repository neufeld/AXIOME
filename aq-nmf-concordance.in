#!/usr/bin/env Rscript
# Copyright 2011
#  Xingpeng Jiang <xingpengjiang@gmail.com>
#  Jonathan Dushoff <dushoff@mcmaster.ca>
#  Andre Masella <andre@masella.name>
options(error = quote(dump.frames("nmf-concordance-debug", TRUE)))

kstart <- 2  # start rank
nloop <- 100  # runs for each rank
nmf.method <- "brunet" # NMF method

source("@prefix@/share/@PACKAGE@/nmf.R")
#source("@prefix@/share/@PACKAGE@/biom.R")

pkgTest <- function(x)
{
        if (!require(x,character.only = TRUE))
        {
                install.packages(x,dep=TRUE)
                if(!require(x,character.only = TRUE)) stop("Package not found")
        }
}

pkgTest("getopt")

#Grab arguments
#Arguments required:
#-i input OTU table (tabular format ONLY, JSON libraries much too slow in R)
#-o output dir
#-a auto flag
spec = matrix(c('input', 'i', 1, "character",'output' , 'o', 1, "character", 'auto' ,'a', 0, "character",'help', 'h', 2, "character"), byrow=TRUE, ncol=4)

opt = getopt(spec)

# if help was asked for print a friendly message
# and exit with a non-zero error code
if ( !is.null(opt$help) ) {
  cat(getopt(spec, usage=TRUE))
  q(status=1)
}

if ( is.null(opt$input) ) {
  print("Input OTU table required.")
  q(status=1)
}
if ( is.null(opt$output) ) {
  print("Output directory required.")
  q(status=1)
}

if ( is.null(opt$auto) ){
	opt$auto <- FALSE
}

otuTable <- opt$input
outDir <- opt$output
autoCalc <- opt$auto


dir.create(outDir)

#Read in and format otu table
print("Reading OTU table")
rawtable <- read.table(otuTable, skip = 1,
comment.char = "", header = TRUE, row.names = 1, sep = "\t")
otutable <- t(rawtable[1:(ncol(rawtable) - 1)])
kend <- min(ncol(rawtable) - 1, 20) # end rank

print("Computing")
z <- apply(as.matrix(t(otutable)), 2, function(x) { x/sum(x) })
ad <- ConsensusFuzzyH(z, nmf.method = nmf.method, Rnmf = FALSE, kstart, kend, nloop, method = "square", ifseed = FALSE)

print("Plotting")
if (autoCalc) {
	pdf(paste(outDir, "/nmf-concordance-auto.pdf",sep=""))
} else {
	pdf(paste(outDir, "/nmf-concordance.pdf",sep=""))
}
print(ad$averdiff)
plot(kstart:kend, ad$averdiff, type = "l", xlab = "Degree", ylab = "Concordance")
points(kstart:kend, ad$averdiff, pch = 16)

#Only autocalculate for degrees larger than 2 (aq-nmf script won't let you do calculation on degrees 1 or 2)
if (length(ad$averdiff) >= 3) {
		mono = TRUE;
    for (i in 1:(length(ad$averdiff)-1) ) {
        if ( i > 2  && i < 20) {
            if ( ad$averdiff[i] >= ad$averdiff[i-1] && ad$averdiff[i] >= ad$averdiff[i+1] ) {
                print(paste("NMF Candidate degree:", i))
                if (autoCalc) {
    		        	system(paste("aq-nmf -i", otuTable, "-e mapping.extra -o", outDir, "-d", i))
                }
            }
        }
        #While we're looking through the plot, check for a consistently increasing line
        if ( ad$averdiff[i] >= ad$averdiff[i+1] ) {
           mono = FALSE;
        }
    }

    #If we have a monotonically increasing line, warn the user we probably can't do anything (though they need to check themselves)
    if ( mono ) {
        print("Monotonically increasing line. Data may be degenerate. Check nmf-concordance.pdf manually.")
    }
}
	

