#!/usr/bin/make -f

# Basic rules for doing an analysis via mothur.

ifeq ($(PIPELINE),MOTHUR)

CLUSTER_IDENT ?= 0.03
DIST_CUTOFF ?= 0.10
OTU_PICKING_METHOD ?= an

ifeq ($(OTU_PICKING_METHOD),an)
OTU_METHOD_LONG = average
else
ifeq ($(OTU_PICKING_METHOD),fn)
OTU_METHOD_LONG = furthest
else
ifeq ($(OTU_PICKING_METHOD),nn)
OTU_METHOD_LONG = nearest
endif
endif
endif

mothur_seqs/seq.names mothur_seqs/seq.unique.fasta: seq.fasta
	@echo Collapsing identical sequences...
	$(V)mothur "#unique.seqs(fasta=seq.fasta)" > /dev/null
	$(V)test -d mothur_seqs || mkdir mothur_seqs
	$(V)mv seq.unique.fasta seq.names mothur_seqs

mothur_seqs/seq.unique.align: mothur_seqs/seq.unique.fasta $(ALIGNMENT_TEMPLATE)
	@echo Aligning sequences...
	$(V)mothur "#align.seqs(candidate=mothur_seqs/seq.unique.fasta, template=$(ALIGNMENT_TEMPLATE), processors=$(NUM_CORES))" > /dev/null

mothur_seqs/seq.unique.filter.fasta: mothur_seqs/seq.unique.align
	@echo Filtering alignment...
	$(V)mothur "#filter.seqs(fasta=mothur_seqs/seq.unique.align)" > /dev/null

mothur_seqs/seq.unique.filter.dist: mothur_seqs/seq.unique.filter.fasta
	@echo Calculating distance matrix...
	$(V)mothur "#dist.seqs(fasta=mothur_seqs/seq.unique.filter.fasta, cutoff=$(DIST_CUTOFF), processors=$(NUM_CORES))" > /dev/null

mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).list: mothur_seqs/seq.unique.filter.dist mothur_seqs/seq.names
	@echo Clustering sequences into OTUs...
	$(V)mothur "#cluster(column=mothur_seqs/seq.unique.filter.dist, name=mothur_seqs/seq.names, method=$(OTU_METHOD_LONG))" > /dev/null

mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull: mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).list
	@echo Filling in missing distances up to cutoff...
	$(V)awk -v cutoff=$(DIST_CUTOFF) 'BEGIN { FS="\t"; ORS=""; } { if (NR == 1) { old = 0.00; oldrow = $$0; print $$0; print "\n"; } else { new = old + 0.01; while ( new < $$1-0.0001 ) { tab = index(oldrow, "\t"); printf "%3.2f", new; print "\t" substr(oldrow, tab+1) "\n"; new = new + 0.01; } print $$0; print "\n"; oldrow = $$0; old = $$1; } } END { new = old + 0.01; while ( new < cutoff ) { tab = index(oldrow, "\t"); printf "%3.2f", new; print "\t" substr(oldrow, tab+1) "\n"; new = new + 0.01; } } ' mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).list > mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull

mothur_seqs/seq.rdp.taxonomy: seq.fasta $(CLASS_TAXA) $(CLASS_SEQS) seq.group
	@echo Classifying sequences...
	$(V)mothur "#classify.seqs(fasta=seq.fasta, template=$(CLASS_SEQS), taxonomy=$(CLASS_TAXA), processors=$(NUM_CORES), group=seq.group)" > /dev/null
	$(V)test -d mothur_seqs || mkdir mothur_seqs
	$(V)mv seq.rdp.* mothur_seqs

mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).$(CLUSTER_IDENT).cons.taxonomy: mothur_seqs/seq.rdp.taxonomy mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull mothur_seqs/seq.names
	@echo Classifying OTUs...
	$(V)mothur "#classify.otu(taxonomy=mothur_seqs/seq.rdp.taxonomy, list=mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull, name=mothur_seqs/seq.names, label=$(CLUSTER_IDENT))" > /dev/null

mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).shared: mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull seq.group
	@echo Making shared file...
	$(V)mothur "#make.shared(list=mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).listfull, group=seq.group, label=$(CLUSTER_IDENT))" > /dev/null

otu_table.txt: mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).shared mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).$(CLUSTER_IDENT).cons.taxonomy
	@echo Making OTU table...
	$(V)mothur "#make.biom(shared=mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).shared, contaxonomy=mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).$(CLUSTER_IDENT).cons.taxonomy)" > /dev/null
	$(V)mv mothur_seqs/seq.unique.filter.$(OTU_PICKING_METHOD).$(CLUSTER_IDENT).biom otu_table.txt
	@echo Moving mothur logs to logs directory...
	$(V)test -d logs || mkdir logs
	$(V)mv mothur.*.logfile logs

ifeq ($(QIIME_1_8),TRUE)
otu_table.tab: otu_table.txt
	@echo Creating legacy OTU table...
	@if [ -f otu_table.tab ]; then rm otu_table.tab; fi
	$(V)$(QIIME_PREFIX)biom convert -b -i $< -o $@ --header-key=taxonomy --output-metadata-id=Consensus\ Lineage
else
otu_table.tab: otu_table.txt
	@echo Creating legacy OTU table...
	$(V)$(QIIME_PREFIX)convert_biom.py -b -i $< -o $@ --header_key=taxonomy --output_metadata_id=Consensus\ Lineage
endif

endif
