#!/usr/bin/make -f
# Automation tool for numerical ecology tools
# Rules which are common between all pipelines go here

#Defaults for all pipelines
NUM_CORES ?= 1
BLASTDB_NAME ?= "Unknown 16S Database"
BLASTDB_COMMAND ?= formatdb
V ?= @

ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_summarized_otu%.txt: otu_table%.tab
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
else
otu_table_summarized_otu%.txt: otu_table%.txt
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
endif

#We need to get the "classic" tab delineated OTU table file if QIIME 1.5 or newer for R scripts
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table.tab: otu_table.txt
	@echo Creating legacy OTU table...
	$(V)$(QIIME_PREFIX)convert_biom.py -b -i otu_table.txt -o otu_table.tab --header_key=taxonomy --output_metadata_id="Consensus Lineage"
otu_table_auto.txt: otu_table.txt otu_table.tab
	@echo Rareifying OTU table to smallest library size...
	$(V)$(QIIME_PREFIX)single_rarefaction.py -i otu_table.txt -o otu_table_auto.txt -d $$(awk -F '\t' 'NR == 1 { } NR == 2 { for (i = 2; i <= NF; i++) { if ($$i ~ /^[0-9]*$$/) { max = i; } } } NR > 2 { for (i = 2; i <= max; i++) { c[i] += $$i; } } END { smallest = c[2]; for (i = 3; i <= max; i++) { if (c[i] < smallest) { smallest = c[i]; }} print smallest; }' otu_table.tab)
otu_table_auto.tab: otu_table_auto.txt
	@echo Creating legacy rarefied OTU table...
	$(V)$(QIIME_PREFIX)convert_biom.py -b -i otu_table_auto.txt -o otu_table_auto.tab --header_key=taxonomy --output_metadata_id="Consensus Lineage"
else
#If not QIIME version 1.5, read off of the tab delineated OTU table using the awk script
otu_table_auto.txt: otu_table.txt
	@echo Rareifying OTU table to smallest library size...
	$(V)$(QIIME_PREFIX)single_rarefaction.py -i otu_table.txt -o otu_table_auto.txt -d $$(awk -F '\t' 'NR == 1 { } NR == 2 { for (i = 2; i <= NF; i++) { if ($$i ~ /^[0-9]*$$/) { max = i; } } } NR > 2 { for (i = 2; i <= max; i++) { c[i] += $$i; } } END { smallest = c[2]; for (i = 3; i <= max; i++) { if (c[i] < smallest) { smallest = c[i]; }} print smallest; }' otu_table.txt)
endif

# Produce a BLAST database
ifeq ($(BLASTDB_COMMAND),formatdb)
blastdbs/nr.nhr blastdbs/nr.nin blastdbs/nr.nsq: seq.fasta_rep_set.fasta
	@echo Creating non-redundant BLAST database with formatdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta_rep_set.fasta -n nr -p F -t $(BLASTDB_NAME)" Non-Redundant"
	$(V)mv nr.* blastdbs
else
ifeq ($(BLASTDB_COMMAND),makeblastdb)
blastdbs/nr.nhr blastdbs/nr.nin blastdbs/nr.nsq: seq.fasta_rep_set.fasta
	@echo Creating non-redundant BLAST database with makeblastdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)makeblastdb -in seq.fasta_rep_set.fasta -dbtype nucl -title $(BLASTDB_NAME)" Non-Redundant" -parse_seqids -out nr
	$(V)mv nr.* blastdbs
endif
endif

ifeq ($(BLASTDB_COMMAND),formatdb)
blastdbs/r.nhr blastdbs/r.nin blastdbs/r.nsq: seq.fasta
	@echo Creating redundant BLAST database with formatdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta -n r -p F -t $(BLASTDB_NAME)
	$(V)mv r.* blastdbs
else
ifeq ($(BLASTDB_COMMAND),makeblastdb)
blastdbs/r.nhr blastdbs/r.nin blastdbs/r.nsq: seq.fasta_rep_set.fasta
	@echo Creating redundant BLAST database with makeblastdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)makeblastdb -in seq.fasta -dbtype nucl -title $(BLASTDB_NAME) -parse_seqids -out r
	$(V)mv r.* blastdbs
endif
endif

# Decorate OTU table with representative sequences
ifeq ($(PIPELINE), MOTHUR)
otu_table_with_sequences.txt: otu_table.tab
	#mothur spits out a horrid array of files which make little sense. This makes it impossible to get the OTU sequences,
	#since the sequence file has a different naming scheme than the OTUs, and there is nothing to correlate the two
	#In the future I may run this through aq-mkrepset and do it that way, but it is brutally disk access intensive for
	#something you don't get much information from
	@echo Creating OTU table with sequence column...
	$(V)awk '{ if (NR == 2) { print $$0 "\tRepr Sequence" } else if ( NR > 1 ) { print $$0 "\tNA" } else { print $$0 } }' otu_table.tab > otu_table_with_sequences.txt
else
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.tab
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.tab > otu_table_with_sequences.txt
else
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.txt
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.txt > otu_table_with_sequences.txt
endif
endif

# Do chimera checking with UCHIME
chimeras.list chimeras.fa: seq.fasta_rep_set.fasta
	@echo Running denovo chimera detection with uchime
	$(V)usearch -uchime_denovo seq.fasta_rep_set.fasta -uchimeout chimeras.list -chimeras chimeras.fa -notrunclabels

# PCA with R
ifndef QIIME_GREATER_THAN_1_5
pca-biplot.pdf: mapping.txt otu_table.txt headers.txt
	@echo Making biplot...
	$(V)aq-pca -i otu_table.txt -t headers.txt -m mapping.txt -e mapping.extra -o pca
else
pca-biplot.pdf: mapping.txt otu_table.tab headers.txt
	@echo Making biplot...
	$(V)aq-pca -i otu_table.tab -t headers.txt -m mapping.txt -e mapping.extra -o pca
endif

# NMF Concordance
ifndef QIIME_GREATER_THAN_1_5
nmf/nmf-concordance.pdf: otu_table.txt
	@echo Making concordance plot...
	$(V)aq-nmf-concordance -i otu_table.txt -o nmf
else
nmf/nmf-concordance.pdf: otu_table.tab
	@echo Making concordance plot...
	$(V)aq-nmf-concordance -i otu_table.tab -o nmf
endif

# NMF Concordance + NMF plots on candidate degrees (if any)
ifndef QIIME_GREATER_THAN_1_5
nmf/nmf-concordance-auto.pdf: otu_table.txt
	@echo Making concordance plot and NMF plots on candidate degrees \(if any\)...
	$(V)aq-nmf-concordance -i otu_table.txt -o nmf -a
else
nmf/nmf-concordance-auto.pdf: otu_table.tab
	@echo Making concordance plot and NMF plots on candidate degrees \(if any\)...
	$(V)aq-nmf-concordance -i otu_table.tab -o nmf -a
endif

.PHONY: all alpha
